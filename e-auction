// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Auction {
    address public auctioneer;
    address public highestBidder;
    uint public highestBid;
    bool public auctionEnded;

    mapping(address => uint) returnsPending;
    
    constructor() {
        auctioneer = msg.sender;
    }
    
    function placeBid() external payable {
        require(!auctionEnded, "Auction has already ended");
        require(msg.value > highestBid, "Bid value must be higher than the current highest bid");
        
        if (highestBid != 0) {

            returnsPending[highestBidder] += highestBid;
            // Return funds to the previous highest bidder
            assert(payable(highestBidder).send(highestBid));
        }
        
        highestBidder = msg.sender;
        highestBid = msg.value;
    }
    
    function endAuction() external {
        require(msg.sender == auctioneer, "Only the auctioneer can end the auction");
        require(!auctionEnded, "Auction has already ended");
        
        auctionEnded = true;
    }
    
    function withdraw() external {
        require(auctionEnded, "Auction has not ended yet");
        
        if (msg.sender == highestBidder) {
            // Transfer the winning bid amount to the highest bidder
            assert(payable(highestBidder).send(highestBid));
        }
    }

    function cancelAuction() public view  {
        require(msg.sender == auctioneer, "Only the auctioneer can cancel the auction");
        revert("Auction has been cancelled");
    }
}


